#This section creates the classes for use in the agent based model

#Flight class creates flights with required info

Define Flights class
	Initialise a Flight agent with arrival time, Non_EEA total, Non_EEA Rate, passengers list, flight list
		Set landed attribute as False
		Set AT attribute to arrival time
    		Set Non_EEA attribute to Non_EEA total 
		Set Non_EEA_r attribute to Non_EEA Rate
		Set passengers attribute to passengers list
		Set fl attribute to flight list
    	
	#land action chekcs to see if the flight has landed
	Define land action with time interval value
	If Flight AT is equal to time interval
		Set Flight landed value to True
	
	#dismbark action removes a set number of non EEA pax from a flight
    	Define disembark action with time interval value, queue list and passenger number total
        Set Flight t value to time interval
	
	#Checks to see if the Flight has landed and whether it has a positive number of non EEA passengers
	If Flight landed value equals True AND it's Non_EEA value is greater than zero:
		IF Flight Non_EEA is greater than Non_EEA_r
			Convert Flight Non_EEA_r attribute to integer and store as nonEEAPass
		ELSE
			Select Flight Non_EEA value and store as nonEEAPass
   
         #Create required additional passenger using Passengers class       
         Loop through i in nonEEAPass
		Create a new passenger and append to queue list
         	#reduce the total number of nonEEA pax on flight by number that have entered queue
            	Minus nonEEAPass from Flight Non_EEA
         	#add total number of pax to queue size
            
#Manages queues agents with required attributes
#In this model only one queue agent is used.             
Define Queues Class
	Initialise a Queue agent with passengers list
        	Set size attribute to 0
		Set passenger attribute to passenger list

	#add action increases the queue size by q_add   
    	Define add action with q_add
	Add q_dd to size attribute

	#Models the queue size decreasing       
    	Define reduce action with open_desks
	If size attribute is greater than 0
		Set nonEEA_Op equal to open_desks divided by 3 #One desk takes 90 seconds to process a passenger in this example, hence each desk processes 1/3 of a passenger in each time interval
        	IF size attribute is greater than nonEEA_Op 	#Checks whether the queue is bigger then the process rate
			Set q_red equal to nonEEA_Op	#If yes, then sets the reduction size to process rate
		Else
			Set q_red equal to size attribute	#If no, sets the reduction size to the size of the queue

        	#cycle through pax list and if they are in the queue, reduce their queue number with regard to the queue reduction
        	For passenger in passenger attribute
			If inqueue attribute equals True
				Call the move_queue action, sending through q_red

       		#Reduces the queue size by the reduction figure    
            	Subtrack q_red from size attribute

#Manages passenger agents
Define Passengers Class
	Initialise Passengers agent with time period and queue list
		Set AT attribute as time period	#set arrival time in pcp as current time
		Set ET attribute as 'none'  #initialises exit time	
		Set queue attribute to queue list #includes queue agents
		Set q_num attribute to the size of the first queue agent in queue plus 1 #sets pax's queue number dependning on existing size
		Set inqueue attribute to True

    	#models how pax move through queue
	Define move_queue action with time period and q_red
	Subtract q_red from q_num #pax queue number updated to reflect reduced queue size
	If q_num < 0
		Call exit_queue action with time interval attribute

    	#models pax exiting queue
    	Define exit_queue action with time interval
	Set ET attribute to time interval
	Set inqueue attribute to false
        
        
    
